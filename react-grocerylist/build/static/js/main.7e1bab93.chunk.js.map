{"version":3,"sources":["Header.js","Quantity.js","Items.js","AddItemForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","title","react_default","a","createElement","defaultProps","Quantity","index","quantity","changeQuantity","className","onClick","Items","_this$props","this","props","name","id","isCompleted","removeItem","completeItem","style","textDecorationLine","src_Quantity","PureComponent","AddItemForm","addItem","itemInput","React","createRef","onSubmit","e","preventDefault","current","value","currentTarget","reset","type","ref","placeholder","App","state","items","prevItemId","handleRemoveItem","_this","setState","prevState","filter","p","handleAddItem","concat","Object","toConsumableArray","handleCompleteItem","handleQuantityChange","delta","_this2","src_Header","src_AddItemForm","map","item","src_Items","key","toString","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e1bab93.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nconst Header = ({title}) => {\n  return (\n    <header>\n      <h1>{title}</h1>\n    </header>\n  );\n}\nHeader.propTypes = {\n  title : PropTypes.string\n}\nHeader.defaultProps = {\n  title: \"Grocery List\"\n}\n\nexport default Header; \n","import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nconst Quantity = ({index, quantity, changeQuantity}) => {\n    return (\n      <div className=\"counter\">\n        <button className=\"counter-action decrement\" onClick={()=>changeQuantity(index, -1)} > - </button>\n        <span className=\"counter-quantity\">{ quantity }</span>\n        <button className=\"counter-action increment\" onClick={()=>changeQuantity(index, +1)}> + </button>\n      </div>\n    );\n\n}\nQuantity.propTypes = {\n  index: PropTypes.number,\n  quantity: PropTypes.number,\n  changeQuantity: PropTypes.func,\n}\n  \nexport default Quantity;","import React, { PureComponent } from \"react\"\nimport PropTypes from \"prop-types\"\nimport Quantity from './Quantity'\n\n\nclass Items extends PureComponent {\n  static propTypes = {\n    changeQuantity: PropTypes.func,\n    name: PropTypes.string.isRequired,\n    quantity: PropTypes.number.isRequired,\n    id: PropTypes.number,\n    index: PropTypes.number,\n    isCompleted: PropTypes.bool,\n  }\n  render(){\n    const {\n      name,\n      id,\n      quantity,\n      index,\n      isCompleted,\n      changeQuantity,\n      removeItem,\n      completeItem,\n    } = this.props\n    return(\n      <div className=\"item\">\n        <span className=\"item-name\" >\n        <button className=\"complete-item\" onClick={() => completeItem(index, isCompleted)}>✔</button>\n        <button className=\"remove-item\" onClick={() => removeItem(id)}>✖</button>\n          { !isCompleted ? <span>{name}</span>  :  <span style={{ textDecorationLine: 'line-through' }}>{name}</span> }\n        </span>\n        <Quantity \n        quantity = { quantity }\n        index = {index}\n        changeQuantity = {changeQuantity} />\n      </div>\n    )\n  };\n}\nexport default Items;","import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nconst AddItemForm = ({ addItem }) => {\n \n let itemInput = React.createRef();\n let handleSubmit = (e) => {\n    e.preventDefault();\n    addItem(itemInput.current.value);\n    e.currentTarget.reset();\n  }\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        ref= { itemInput } \n        placeholder=\"Enter an item\"\n      />\n\n        <input\n          type=\"submit\"\n          value = \"Add Item\"\n        />\n    </form>\n\n  );\n}\nAddItemForm.propTypes = {\n  addItem: PropTypes.func,\n}\nexport default AddItemForm;","import React, { Component } from 'react';\n\nimport Header from './Header';\nimport Items from \"./Items\";\nimport AddItemForm from \"./AddItemForm\"\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    items: [],\n  }\n  prevItemId = 0\n\n  handleRemoveItem = (id) => {\n    this.setState( prevState => {\n      return {\n        items: prevState.items.filter(p => p.id !== id)\n      };\n    });\n  }\n  handleAddItem = (name) => {\n    this.setState( prevState => {\n      return {\n        items: [\n          ...prevState.items,\n          {\n            name,\n            quantity: 1,\n            id: this.prevItemId+=1,\n            isCompleted : false,\n          }\n        ]\n      };\n    })\n  }\n  handleCompleteItem = (index, isCompleted) =>{\n    this.setState( prevState => ({\n      isCompleted : prevState.items[index].isCompleted = !isCompleted\n    }));\n  }\n\n  handleQuantityChange = (index, delta) => {\n    this.setState( prevState => ({\n      quantity: prevState.items[index].quantity += delta\n    }));\n  \n  }\n  render() {\n    return (\n      <div className=\"App\">\n       <Header />\n       <AddItemForm addItem = {this.handleAddItem}/>\n\n       {this.state.items.map( (item, index) =>\n          <Items\n            name={item.name}\n            quantity={item.quantity}\n            id={item.id}\n            key={item.id.toString()} \n            index={index}\n            isCompleted = {item.isCompleted}\n            changeQuantity={this.handleQuantityChange}   \n            removeItem= {this.handleRemoveItem}\n            completeItem = {this.handleCompleteItem}            \n          />\n        )}\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}